.final-round(v-if="round.phase == 'FINAL ROUND'")
  video.fullscreen(muted autoplay loop poster="/img/invalid/polygons.jpg")
    source(src="/video/invalid/polygons.mp4")
  .interface

    .inside
      template(v-if="!ui.enterFinalPasswords")
        h1 This is the final round!
        p In the final round, your goal is to hack into accounts of your coworkers.
        p When the timer starts, type in any password you think any of your coworkers may have used successfully. If you're right, you'll 
          em steal 
          | 40 points from that player!
        p You can type as many passwords as you like, but if you crack your own password, you will be punished.
        p There are {{computedUnclaimedPasswords}} crackable passwords in the system.
        h2 Round begins in {{round.hurryTime}} seconds.
        
      template(v-if="ui.enterFinalPasswords")

        h2.success(v-if="ui.passwordSuccessMessage") Success!
        h2(v-else) Crack your Coworkers
        form.password-form(@submit.prevent="tryToCrackWith(ui.passwordAttempt)")
          fieldset
            input(type="text" v-model="ui.passwordAttempt" id="PasswordAttempt" :class="{ 'error' : ui.passwordInputError }" autocomplete="off" required)
            label(for="PasswordAttempt") Enter A Password
              sup.required *
          .button-holder
            button(type="submit") Submit
        .password-errors(v-if="ui.passwordAttemptErrors && ui.passwordAttemptErrors.length > 0")
          .error(v-if="ui.passwordAttemptErrors.length == 1") {{ui.passwordAttemptErrors[0]}}
          ul(v-if="ui.passwordAttemptErrors.length > 1")
            li.error(v-for="(err,index) in ui.passwordAttemptErrors") {{err}}

        .success(v-if="ui.passwordSuccessMessage")
          p.success {{ui.passwordSuccessMessage}}
        
        p.there-are-unclaimed There are 
          span.count {{computedUnclaimedPasswords}}
          |  unclaimed passwords in the system.

      button.quiet-music(@click="toggleMusicVolume()" v-bind:class="{ hush: !ui.musicHushed, enlouden: ui.musicHushed }")
        svg(xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100")
          path.speaker(d="M51.6 13.3L24.5 34.1 4.8 35.8v28.4l19.7 1.7 27.1 20.8z")
          path.left(d="M64.6 51.7c0 7.3-2.3 14.1-6.1 19.7l7 4.8c4.8-7 7.6-15.4 7.6-24.5s-2.8-17.5-7.6-24.5l-7 4.8c3.9 5.6 6.1 12.4 6.1 19.7z")
          path.middle(d="M77.4 51.7c0 10-3.1 19.2-8.3 26.9l7 4.8c6.2-9 9.8-19.9 9.8-31.7C85.9 40 82.3 29 76.1 20l-7 4.8c5.2 7.7 8.3 17 8.3 26.9z")
          path.right(d="M86.3 90.4c7.5-11 11.9-24.3 11.9-38.6s-4.4-27.6-11.9-38.6l-7 4.8c6.6 9.6 10.5 21.3 10.5 33.8S85.9 76 79.3 85.6l7 4.8z")
        .tip(v-if="ui.musicHushed") Enlouden The Music
        .tip(v-if="!ui.musicHushed") Hush The Music

  .round-reminder(:class="{'visible': (round.hurryTime <= 10)}")
    h3 Played rounds...
    ol
      li(v-for="round in game.roundSummary") 
        .challenge-name {{round.challenge}}
        ul
          template(v-for="rule in round.rules")
            li(v-if="rule.type=='Demand A Letter'") Required 
              strong {{rule.inputValue}} 
            li(v-if="rule.type=='Ban A Letter'") Banned 
              strong {{rule.inputValue}} 
            li(v-if="rule.type=='Ban A Combo'") Can't use 
              strong {{rule.inputValue}} 
              | with 
              strong {{rule.inputValueTwo}}
            li(v-if="rule.type=='Set A Minimum'") Min of 
              strong {{rule.inputValue}}
            li(v-if="rule.type=='Set A Maximum'") Max of 
              strong {{rule.inputValue}}
            li(v-if="rule.type=='Limit Vowels'") Vowel limit of 
              strong {{rule.inputValue}}
            

  .timer.final-timer(v-if="round.roundTimer != undefined")
    time {{round.finalTimeLeft}}

  include _scores
    